// Generated by CoffeeScript 1.6.1
(function() {

  describe('Outstanding', function() {
    describe('normal usage', function() {
      it('count is zero on creation', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        return expect(outstanding.count()).toEqual(0);
      });
      it('count is incremented on start', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started();
        return expect(outstanding.count()).toEqual(1);
      });
      it('count is incremented on start of many', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(13);
        return expect(outstanding.count()).toEqual(13);
      });
      it('count is decremented on completed', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(10);
        outstanding.completed();
        return expect(outstanding.count()).toEqual(9);
      });
      it('count is decremented on completion of many', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(13);
        outstanding.completed(10);
        return expect(outstanding.count()).toEqual(3);
      });
      it('count goes back to zero', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(13);
        outstanding.completed(13);
        return expect(outstanding.count()).toEqual(0);
      });
      return it('count can be reset even if not zero', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(13);
        outstanding.reset();
        return expect(outstanding.count()).toEqual(0);
      });
    });
    return describe('exceptional usage', function() {
      it('exception is thrown if completing more than started, when completing many', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(13);
        return expect(function() {
          return outstanding.completed(14);
        }).toThrow({
          message: "Completed is more than outstanding: 14 > 13"
        });
      });
      it('exception is thrown if completing more than started, when completing single', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started();
        outstanding.completed();
        return expect(function() {
          return outstanding.completed();
        }).toThrow({
          message: "Completed is more than outstanding: 1 > 0"
        });
      });
      it('exception is thrown if started zero', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        return expect(function() {
          return outstanding.started(0);
        }).toThrow({
          message: "Started is not >= 0: 0"
        });
      });
      it('exception is thrown if completed zero', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(13);
        return expect(function() {
          return outstanding.completed(0);
        }).toThrow({
          message: "Completed is not >= 0: 0"
        });
      });
      it('exception is thrown if started negative', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        return expect(function() {
          return outstanding.started(-2);
        }).toThrow({
          message: "Started is not >= 0: -2"
        });
      });
      return it('exception is thrown if completed negative', function() {
        var outstanding;
        outstanding = new nicetohave.Outstanding();
        outstanding.started(13);
        return expect(function() {
          return outstanding.completed(-2);
        }).toThrow({
          message: "Completed is not >= 0: -2"
        });
      });
    });
  });

}).call(this);
