// Generated by CoffeeScript 1.4.0
(function() {

  describe('Categorisation', function() {
    return describe('loading from card', function() {
      beforeEach(function() {});
      it('when given card with no comments, has default categories', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(false);
        return expect(categorisation.axis("value").hasValue()).toEqual(false);
      });
      it('when given card with a single comment, with no assignment, has default categories', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments(new nicetohave.Comment("some random comment"));
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(false);
        return expect(categorisation.axis("value").hasValue()).toEqual(false);
      });
      it('when given card with a single comment, with an assignment to one axis, one is assigned, other is default', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("risk:0.5")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.5);
        return expect(categorisation.axis("value").hasValue()).toEqual(false);
      });
      it('when given card with a single comment, with an assignment to both axes, both are assigned', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("risk:0.5 value:0.2")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.5);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(0.2);
      });
      it('when given card with a single comment, with an assignment to both axes, but out of range, both are assigned max value', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("risk:20.5 value:1.2")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(1.0);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(1.0);
      });
      it('when given card with a single comment, with an assignment to both axes, but mixed with guff, assigns to both', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("hello risk:0.2 some guff, blah value:0.3 chumley")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.2);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(0.3);
      });
      it('when given card with a single comment, with an assignment to both axes, but in other order, assigns to both', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("value:0.3 risk:0.2")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.2);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(0.3);
      });
      it('when given card with a two comments, with an assignment to both axes, values are taken from latest comment', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("risk:0.2 value:0.1"), new nicetohave.Comment("risk:0.6 value:0.7")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.2);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(0.1);
      });
      it('when given card with three comments, first and last with an assignment to both axes, values are taken from latest comment', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("risk:0.2 value:0.1"), new nicetohave.Comment("some other random crap"), new nicetohave.Comment("risk:0.6 value:0.7")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.2);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(0.1);
      });
      it('when given card with three comments, middle only one with an assignment, values are taken from middle comment', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("some other random crap"), new nicetohave.Comment("risk:0.6 value:0.7"), new nicetohave.Comment("some other random crap")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.6);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(0.7);
      });
      return it('when card comments change, values are updated automatically from latest comments', function() {
        var card, categorisation, privilege;
        privilege = new nicetohave.Privilege({});
        card = new nicetohave.Card("510557f3e002eb8d56002e04", privilege);
        card.comments([new nicetohave.Comment("risk:0.6 value:0.7")]);
        categorisation = new nicetohave.Categorisation(card);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.6);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        expect(categorisation.axis("value").value()).toEqual(0.7);
        card.comments([new nicetohave.Comment("risk:0.2 value:0.1"), new nicetohave.Comment("risk:0.6 value:0.7")]);
        expect(categorisation.axis("risk").hasValue()).toEqual(true);
        expect(categorisation.axis("risk").value()).toEqual(0.2);
        expect(categorisation.axis("value").hasValue()).toEqual(true);
        return expect(categorisation.axis("value").value()).toEqual(0.1);
      });
    });
  });

}).call(this);
