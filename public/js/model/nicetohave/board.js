// Generated by CoffeeScript 1.4.0
(function() {
  var Board, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.nicetohave) == null) {
    window.nicetohave = {};
  }

  Board = (function() {

    function Board(id, privilege) {
      this._getList = __bind(this._getList, this);

      this._loadAllLists = __bind(this._loadAllLists, this);

      this._parseLists = __bind(this._parseLists, this);

      this._parseFields = __bind(this._parseFields, this);

      this.load = __bind(this.load, this);
      if (!/[a-z0-9]{24}/.test(id)) {
        throw {
          message: "Not a valid board id: '" + id + "'"
        };
      }
      this.id = ko.observable(id);
      this.privilege = privilege;
      this.loadStatus = ko.observable("created");
      this._existingCards = {};
      this.name = ko.observable("");
      this.lists = ko.observableArray();
    }

    Board.prototype.load = function() {
      var onFailure,
        _this = this;
      this.loadStatus("in-progress");
      onFailure = function() {
        return _this.loadStatus("load-failed");
      };
      return this.privilege.using(nicetohave.PrivilegeLevel.READ_ONLY, function(trello) {
        return trello.boards.get(_this.id(), {}, function(data) {
          return _this._parseFields(data);
        }, onFailure);
      });
    };

    Board.prototype._parseFields = function(data) {
      return this.name(data.name);
    };

    Board.prototype._parseLists = function(data) {
      var c;
      return this.lists((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          c = data[_i];
          _results.push(this._getList(c.id));
        }
        return _results;
      }).call(this));
    };

    Board.prototype._loadAllLists = function() {
      var list, _i, _len, _ref1, _results;
      _ref1 = this.lists();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        list = _ref1[_i];
        _results.push(list.load());
      }
      return _results;
    };

    Board.prototype._getList = function(id) {
      if (!(this._existingLists[id] != null)) {
        this._existingLists[id] = new nicetohave.List(id, this.privilege);
      }
      return this._existingLists[id];
    };

    return Board;

  })();

  window.nicetohave.Board = Board;

}).call(this);
