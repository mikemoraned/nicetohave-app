// Generated by CoffeeScript 1.6.1
(function() {
  var List, _ref,
    _this = this;

  if ((_ref = window.nicetohave) == null) {
    window.nicetohave = {};
  }

  List = (function() {

    function List(id, privilege, outstanding) {
      var _this = this;
      this.outstanding = outstanding;
      this._getCard = function(id) {
        return List.prototype._getCard.apply(_this, arguments);
      };
      this._loadAllCards = function() {
        return List.prototype._loadAllCards.apply(_this, arguments);
      };
      this._parseCards = function(data) {
        return List.prototype._parseCards.apply(_this, arguments);
      };
      this._parseFields = function(data) {
        return List.prototype._parseFields.apply(_this, arguments);
      };
      this.load = function() {
        return List.prototype.load.apply(_this, arguments);
      };
      if (!/[a-z0-9]{24}/.test(id)) {
        throw {
          message: "Not a valid list id: '" + id + "'"
        };
      }
      this.id = ko.observable(id);
      this.privilege = privilege;
      this.loadStatus = ko.observable("created");
      this._existingCards = {};
      this.name = ko.observable("");
      this.cards = ko.observableArray();
    }

    List.prototype.load = function() {
      var onFailure,
        _this = this;
      this.loadStatus("in-progress");
      this.outstanding.started();
      onFailure = function() {
        return _this.loadStatus("load-failed");
      };
      return this.privilege.using(nicetohave.PrivilegeLevel.READ_ONLY, function(trello) {
        return trello.lists.get(_this.id(), {}, function(data) {
          _this._parseFields(data);
          return trello.lists.get(_this.id() + "/cards", {}, function(data) {
            _this._parseCards(data);
            _this._loadAllCards();
            _this.loadStatus("load-success");
            return _this.outstanding.completed();
          }, onFailure);
        }, onFailure);
      });
    };

    List.prototype._parseFields = function(data) {
      if (data != null) {
        return this.name(data.name);
      } else {
        return console.log("Workaround for list data being undefined and then later defined, https://trello.com/c/k2VKLuJg");
      }
    };

    List.prototype._parseCards = function(data) {
      var c;
      return this.cards((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          c = data[_i];
          _results.push(this._getCard(c.id));
        }
        return _results;
      }).call(this));
    };

    List.prototype._loadAllCards = function() {
      var card, _i, _len, _ref1, _results;
      this.outstanding.started(this.cards().length);
      _ref1 = this.cards();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        card = _ref1[_i];
        card.load();
        _results.push(this.outstanding.completed());
      }
      return _results;
    };

    List.prototype._getCard = function(id) {
      if (this._existingCards[id] == null) {
        this._existingCards[id] = new nicetohave.Card(id, this.privilege, this.outstanding);
      }
      return this._existingCards[id];
    };

    return List;

  })();

  window.nicetohave.List = List;

}).call(this);
