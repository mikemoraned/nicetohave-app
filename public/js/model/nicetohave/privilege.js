// Generated by CoffeeScript 1.6.1
(function() {
  var Privilege, _ref,
    _this = this;

  if ((_ref = window.nicetohave) == null) {
    window.nicetohave = {};
  }

  Privilege = (function() {

    function Privilege(trello) {
      var _this = this;
      this._raiseTo = function(level) {
        return Privilege.prototype._raiseTo.apply(_this, arguments);
      };
      this.using = function(expectedLevel, fn) {
        return Privilege.prototype.using.apply(_this, arguments);
      };
      this.trello = trello;
      this.level = ko.observable(nicetohave.PrivilegeLevel.NONE);
      this.changingLevel = ko.observable(false);
      this.callDepth = ko.observable(0);
      this.pendingSuccessFnForLevel = {};
    }

    Privilege.prototype.using = function(expectedLevel, fn) {
      var tracked,
        _this = this;
      tracked = function(trello) {
        _this.callDepth(_this.callDepth() + 1);
        fn(trello);
        return _this.callDepth(_this.callDepth() - 1);
      };
      if (this.level().satisfies(expectedLevel)) {
        return tracked(this.trello);
      } else {
        if (this.pendingSuccessFnForLevel[expectedLevel.name] != null) {
          console.log("Already a pending raise to level " + expectedLevel.name + ", will join that one");
          return this.pendingSuccessFnForLevel[expectedLevel.name].push(tracked);
        } else {
          console.log("Raising level to " + expectedLevel.name);
          this.pendingSuccessFnForLevel[expectedLevel.name] = [tracked];
          return this._raiseTo(expectedLevel);
        }
      }
    };

    Privilege.prototype._raiseTo = function(level) {
      var _this = this;
      this.changingLevel(true);
      this.trello.deauthorize();
      this.level(nicetohave.PrivilegeLevel.NONE);
      return this.trello.authorize({
        type: "popup",
        name: "Nice to have",
        success: function() {
          var pendingSuccessFn, successFns, _i, _len;
          console.log("Success!");
          _this.level(level);
          _this.changingLevel(false);
          successFns = _this.pendingSuccessFnForLevel[level.name];
          console.log("Calling back " + successFns.length + " successFns");
          for (_i = 0, _len = successFns.length; _i < _len; _i++) {
            pendingSuccessFn = successFns[_i];
            pendingSuccessFn(_this.trello);
          }
          return _this.pendingSuccessFnForLevel[level.name] = null;
        },
        error: function(m) {
          _this.pendingSuccessFnForLevel[level.name] = null;
          _this.changingLevel(false);
          return console.log("Error: " + m);
        },
        scope: level.trelloScope
      });
    };

    return Privilege;

  })();

  window.nicetohave.Privilege = Privilege;

}).call(this);
