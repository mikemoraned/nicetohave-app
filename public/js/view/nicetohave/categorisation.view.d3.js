// Generated by CoffeeScript 1.4.0
(function() {
  var D3CategorisationView, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = window.nicetohave) == null) {
    window.nicetohave = {};
  }

  D3CategorisationView = (function() {

    function D3CategorisationView(rootSelector, width, height, maxRadius) {
      this.rootSelector = rootSelector;
      this.width = width;
      this.height = height;
      this.maxRadius = maxRadius != null ? maxRadius : 7;
      this._updateDisplay = __bind(this._updateDisplay, this);

      this._clampY = __bind(this._clampY, this);

      this._clampX = __bind(this._clampX, this);

      this._mappingForCategorisation = __bind(this._mappingForCategorisation, this);

      this.subscribeTo = __bind(this.subscribeTo, this);

      this._setupDragBehaviour = __bind(this._setupDragBehaviour, this);

      this._setupScales = __bind(this._setupScales, this);

      this._setup = __bind(this._setup, this);

      this._setup();
      this._existingMappingForCategorisation = {};
    }

    D3CategorisationView.prototype._setup = function() {
      this.root = d3.select(this.rootSelector);
      this._setupScales();
      return this._setupDragBehaviour();
    };

    D3CategorisationView.prototype._setupScales = function() {
      this.valueScale = d3.scale.linear().domain([0, 1]).range([this.maxRadius, this.width - this.maxRadius]).clamp(true);
      this.riskScale = d3.scale.linear().domain([0, 1]).range([this.maxRadius, 0.75 * (this.height - this.maxRadius)]).clamp(true);
      this.uncategorisedValueScale = this.valueScale;
      return this.uncategorisedRiskScale = d3.scale.linear().domain([0, 1]).range([0.75 * (this.height - this.maxRadius), this.height - this.maxRadius]).clamp(true);
    };

    D3CategorisationView.prototype._setupDragBehaviour = function() {
      var dragend, dragmove, self,
        _this = this;
      self = this;
      dragmove = function(d) {
        return d3.select(this).attr("cx", d.x = self._clampX(d3.event.x)).attr("cy", d.y = self._clampY(d3.event.y));
      };
      dragend = function(d) {
        var newRisk, newValue;
        newValue = _this.valueScale.invert(d.x);
        newRisk = _this.riskScale.invert(d.y);
        d.cat.axis("value").value(newValue);
        return d.cat.axis("risk").value(newRisk);
      };
      return this.drag = d3.behavior.drag().origin(Object).on("drag", dragmove).on("dragend", dragend);
    };

    D3CategorisationView.prototype.subscribeTo = function(categorisations) {
      var _this = this;
      this.mapped = ko.computed(function() {
        return categorisations().map(_this._mappingForCategorisation);
      });
      this.mapped.subscribe(this._updateDisplay);
      return this._updateDisplay(this.mapped());
    };

    D3CategorisationView.prototype._mappingForCategorisation = function(c) {
      var id, mapping;
      id = c.card.id();
      mapping = this._existingMappingForCategorisation[id];
      if (!(mapping != null)) {
        mapping = {
          id: id,
          cat: c
        };
        this._existingMappingForCategorisation[id] = mapping;
      }
      if (c.fullyDefined()) {
        mapping.x = this.valueScale(c.axis("value").value());
        mapping.y = this.riskScale(c.axis("risk").value());
      } else {
        if (!(mapping.uncategorisedX != null)) {
          mapping.uncategorisedX = this.uncategorisedValueScale(Math.random());
        }
        if (!(mapping.uncategorisedY != null)) {
          mapping.uncategorisedY = this.uncategorisedRiskScale(Math.random());
        }
        mapping.x = mapping.uncategorisedX;
        mapping.y = mapping.uncategorisedY;
      }
      return mapping;
    };

    D3CategorisationView.prototype._clampX = function(x) {
      return Math.max(this.maxRadius, Math.min(x, this.width - this.maxRadius));
    };

    D3CategorisationView.prototype._clampY = function(y) {
      return Math.max(this.maxRadius, Math.min(y, this.height - this.maxRadius));
    };

    D3CategorisationView.prototype._updateDisplay = function(mapped) {
      var existingCategorisations, newCategorisationCircles, newCategorisations,
        _this = this;
      existingCategorisations = this.root.selectAll("circle.card").data(mapped, function(d) {
        return d.id;
      });
      existingCategorisations.transition().duration(200).attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      }).select("title").text(function(d) {
        return d.cat.card.name();
      });
      newCategorisations = existingCategorisations.enter();
      newCategorisationCircles = newCategorisations.append("circle").attr("class", "card").attr("r", this.maxRadius).call(this.drag);
      newCategorisationCircles.append("title").text(function(d) {
        return d.cat.card.name();
      });
      newCategorisationCircles.attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
      return existingCategorisations.exit().transition().duration(200).style("opacity", 0).duration(250).attr("cy", function(d) {
        return _this.riskScale(4);
      }).remove();
    };

    return D3CategorisationView;

  })();

  window.nicetohave.D3CategorisationView = D3CategorisationView;

}).call(this);
